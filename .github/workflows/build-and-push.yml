name: Build and Push ComfyDock Images

# Tag Format: {comfyui_version}-py{python}-cuda{cuda}-pt{pytorch}-{image_version}
# Examples:
#   - v1.3.0-py3.12-cuda12.4-ptstable-v1.0.0  (ComfyUI v1.3.0, first image version)
#   - v1.3.0-py3.12-cuda12.4-ptstable-v1.1.0  (ComfyUI v1.3.0, updated dockerfile)
#   - master-py3.12-cuda12.4-ptstable-v1.0.0  (ComfyUI master branch)
#
# Image Version: Increment this when making changes to the Dockerfile, dependencies,
# or security fixes without waiting for a new ComfyUI release.

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      comfyui_version:
        description: "ComfyUI version or branch (e.g. master, 1.3.0, etc.)"
        required: false
        default: "master"
      image_version:
        description: "Image version (e.g. v1.0.0, v1.1.0) - increments for dockerfile changes"
        required: false
      force_build:
        description: "Force build even if tag exists"
        required: false
        default: false
        type: boolean

  # Weekly schedule (every week on Monday)
  schedule:
    - cron: '30 11 * * 1'  # Runs every Monday at 11:30 UTC = 3:30 AM PST

jobs:
  # New job to determine the ComfyUI version once
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      comfyui_version: ${{ steps.set_version.outputs.comfyui_version }}
      image_version: ${{ steps.set_version.outputs.image_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Latest ComfyUI Release (if scheduled)
        id: get_latest
        if: ${{ github.event_name == 'schedule' }}
        run: |
          LATEST=$(curl -s https://api.github.com/repos/comfyanonymous/ComfyUI/releases \
            | jq -r '[.[] | select(.prerelease==false)] | first | .tag_name')
          echo "latest_version=$LATEST" >> $GITHUB_OUTPUT

      - name: Set ComfyUI Version and Image Version
        id: set_version
        run: |
          # Determine ComfyUI version
          COMFYUI_VERSION=""
          if [ -n "${{ github.event.inputs.comfyui_version }}" ]; then
            COMFYUI_VERSION="${{ github.event.inputs.comfyui_version }}"
            echo "Using user-specified ComfyUI version: $COMFYUI_VERSION"
          elif [ "${{ github.event_name }}" == "schedule" ] && [ -n "${{ steps.get_latest.outputs.latest_version }}" ]; then
            COMFYUI_VERSION="${{ steps.get_latest.outputs.latest_version }}"
            echo "Using latest ComfyUI release: $COMFYUI_VERSION"
          else
            COMFYUI_VERSION="master"
            echo "Using default ComfyUI version: $COMFYUI_VERSION"
          fi
          echo "comfyui_version=$COMFYUI_VERSION" >> $GITHUB_OUTPUT
          
          # Determine image version
          IMAGE_VERSION=""
          if [ -n "${{ github.event.inputs.image_version }}" ]; then
            IMAGE_VERSION="${{ github.event.inputs.image_version }}"
            echo "Using user-specified image version: $IMAGE_VERSION"
          else
            # Read current version from VERSION file
            if [ -f "VERSION" ]; then
              IMAGE_VERSION=$(cat VERSION | tr -d '[:space:]')
              echo "Using image version from VERSION file: $IMAGE_VERSION"
            else
              IMAGE_VERSION="v1.0.0"
              echo "VERSION file not found, using default: $IMAGE_VERSION"
            fi
          fi
          echo "image_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    needs: determine-version # Wait for the version to be determined
    runs-on: ubuntu-latest

    # Only skip the scheduled build if on a non-default branch
    # Note: This condition applies to the whole job now. If the schedule runs
    # on a non-main branch, NO matrix jobs will start.
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'

    # Define your version combos using strategy matrix
    strategy:
      fail-fast: false # Prevent other jobs from stopping if one fails
      matrix:
        python: ["3.10", "3.12"]      # Standard Python versions
        cuda: ["12.4", "12.8"]       # Standard CUDA versions
        pytorch: ["stable"]          # Standard PyTorch versions
        # include:
          # Add your unique combination here
          # - python: "3.12"
          #   cuda: "12.8"
          #   pytorch: "stable"
          # Add more unique combinations as needed
          # - python: "3.x"
          #   cuda: "1x.y"
          #   pytorch: "..."

    # Env vars available to all matrix jobs
    env:
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
      # COMFYUI_VERSION and IMAGE_VERSION are now accessed via needs.determine-version.outputs

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Check if the specific tag for THIS matrix combination exists
      - name: Check if tag already built
        id: check_tag
        # Only run the check for scheduled events (unless force_build is true)
        if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_build != 'true') }}
        run: |
          PY="${{ matrix.python }}"
          CU="${{ matrix.cuda }}"
          PT="${{ matrix.pytorch }}"
          COMFYUI_VERSION="${{ needs.determine-version.outputs.comfyui_version }}"
          IMAGE_VERSION="${{ needs.determine-version.outputs.image_version }}"
          TAG_NAME="${COMFYUI_VERSION}-py${PY}-cuda${CU}-pt${PT}-${IMAGE_VERSION}"

          echo "Checking Docker Hub for tag: $TAG_NAME for user ${DOCKERHUB_USERNAME}"
          # Check if tag exists by trying to fetch its manifest
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/comfydock-env/tags/${TAG_NAME}")

          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "Tag $TAG_NAME already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME does not exist (HTTP status: $STATUS_CODE)."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Login - skip if scheduled and tag already exists (unless force_build)
      - name: Login to Docker Hub
        if: ${{ github.event.inputs.force_build == 'true' || github.event_name != 'schedule' || steps.check_tag.outputs.exists != 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use secret directly

      # Build & push - skip if scheduled and tag already exists (unless force_build)
      - name: Build, Push, and Clean up
        if: ${{ github.event.inputs.force_build == 'true' || github.event_name != 'schedule' || steps.check_tag.outputs.exists != 'true' }}
        run: |
          # Get versions from matrix context and needs context
          PY="${{ matrix.python }}"
          CU="${{ matrix.cuda }}"
          PT="${{ matrix.pytorch }}"
          COMFYUI_VERSION="${{ needs.determine-version.outputs.comfyui_version }}"
          IMAGE_VERSION="${{ needs.determine-version.outputs.image_version }}"

          TAG="${COMFYUI_VERSION}-py${PY}-cuda${CU}-pt${PT}-${IMAGE_VERSION}"
          IMAGE_NAME="${DOCKERHUB_USERNAME}/comfydock-env:${TAG}"

          echo "Processing image: $IMAGE_NAME"
          echo "Using ComfyUI: $COMFYUI_VERSION, Image: $IMAGE_VERSION, Python: $PY, CUDA: $CU, PyTorch: $PT"

          # Convert CUDA version format (e.g., "12.4" to "cu124")
          CU_STRIPPED="${CU//./}"
          CUDA_ARG="cu${CU_STRIPPED}"

          echo "Building image..."
          docker build \
            --build-arg COMFYUI_VERSION="${COMFYUI_VERSION}" \
            --build-arg CUDA_VERSION="${CUDA_ARG}" \
            --build-arg PYTHON_VERSION="${PY}" \
            --build-arg PYTORCH_VERSION="${PT}" \
            -t "$IMAGE_NAME" .

          echo "Pushing image: $IMAGE_NAME"
          docker push "$IMAGE_NAME"

          echo "Cleaning up image: $IMAGE_NAME"
          docker rmi -f "$IMAGE_NAME"

          # Clean up builder cache to free up space
          echo "Cleaning up builder cache..."
          docker builder prune -f

          # Optional: more aggressive cleanup (might impact performance if builds share layers)
          # echo "Running system prune..."
          # docker system prune -af

  # Optional final cleanup job after all matrix builds complete
  final-cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push # Run after all matrix jobs are done (or failed if fail-fast is false)
    # Always run this cleanup step, even if matrix jobs were skipped or failed
    if: ${{ always() }}
    steps:
      - name: Docker System Prune
        run: |
          echo "Running final Docker system prune..."
          docker system prune -af
