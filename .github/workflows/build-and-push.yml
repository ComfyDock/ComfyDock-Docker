name: Build and Push ComfyDock Images

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      comfyui_version:
        description: "ComfyUI version or branch (e.g. master, 1.3.0, etc.)"
        required: false
        default: "master"

  # Daily schedule
  schedule:
    - cron: '30 1 * * *'  # Runs once a day at 01:30 UTC

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # Only skip the scheduled build if on a non-default branch
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/master'

    # Define your version combos here in env so you only edit once
    env:
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      PYTHON_VERSIONS: "3.10 3.12"      # add "3.13" here later
      CUDA_VERSIONS: "11.8 12.4"       # add more as needed
      PYTORCH_VERSIONS: "stable"       # or "nightly stable", etc.

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # If running on schedule, get latest ComfyUI release
      - name: Get Latest ComfyUI Release
        if: ${{ github.event_name == 'schedule' }}
        run: |
          LATEST=$(curl -s https://api.github.com/repos/comfyanonymous/ComfyUI/releases \
            | jq -r '[.[] | select(.prerelease==false)] | first | .tag_name')
          echo "COMFYUI_VERSION=$LATEST" >> $GITHUB_ENV

      - name: Set ComfyUI Version
        run: |
          if [ -n "${{ github.event.inputs.comfyui_version }}" ]; then
            echo "Using user-specified ComfyUI version: ${{ github.event.inputs.comfyui_version }}"
            echo "COMFYUI_VERSION=${{ github.event.inputs.comfyui_version }}" >> $GITHUB_ENV
          else
            if [ -z "${COMFYUI_VERSION}" ]; then
              echo "No version from schedule or user input; defaulting to 'master'."
              echo "COMFYUI_VERSION=master" >> $GITHUB_ENV
            fi
          fi

      # (Optional) On schedule, check if all tags for this ComfyUI version exist
      - name: Check if tags already built
        if: ${{ github.event_name == 'schedule' }}
        id: check_tags
        run: |
          echo "Checking Docker Hub for existing tags..."
          ALL_TAGS=$(curl -s "https://registry.hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/comfydock-env/tags/?page_size=100" \
            | jq -r '.results[].name')

          echo "Fetched tags from Docker Hub:"
          echo "$ALL_TAGS"
          echo

          ALL_BUILT="true"
          for PY in $PYTHON_VERSIONS; do
            for CU in $CUDA_VERSIONS; do
              for PT in $PYTORCH_VERSIONS; do
                TAG_NAME="${COMFYUI_VERSION}-py${PY}-cuda${CU}-pt${PT}"
                if ! echo "$ALL_TAGS" | grep -q "^${TAG_NAME}\$"; then
                  echo "Missing tag: $TAG_NAME"
                  ALL_BUILT="false"
                  break 3
                fi
              done
            done
          done

          echo "ALL_BUILT=$ALL_BUILT" >> $GITHUB_OUTPUT

      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      # Build & push (skip if schedule AND all tags exist)
      - name: Build and Push
        if: ${{ github.event_name != 'schedule' || steps.check_tags.outputs.ALL_BUILT != 'true' }}
        run: |
          echo "Starting build for ComfyUI_VERSION=${COMFYUI_VERSION}"

          for PY in $PYTHON_VERSIONS; do
            for CU in $CUDA_VERSIONS; do
              for PT in $PYTORCH_VERSIONS; do
                TAG="${COMFYUI_VERSION}-py${PY}-cuda${CU}-pt${PT}"
                IMAGE_NAME="${DOCKERHUB_USERNAME}/comfydock-env:${TAG}"

                echo "Building image: $IMAGE_NAME"

                # Convert "12.4" to "cu124" if your Dockerfile expects that
                CU_STRIPPED="${CU//./}"
                CUDA_ARG="cu${CU_STRIPPED}"

                docker build \
                  --build-arg COMFYUI_VERSION="${COMFYUI_VERSION}" \
                  --build-arg PYTHON_VERSION="${PY}" \
                  --build-arg CUDA_VERSION="${CUDA_ARG}" \
                  --build-arg PYTORCH_VERSION="${PT}" \
                  -t "$IMAGE_NAME" .

                docker push "$IMAGE_NAME"
              done
            done
          done
        env:
          COMFYUI_VERSION: ${{ env.COMFYUI_VERSION }}
